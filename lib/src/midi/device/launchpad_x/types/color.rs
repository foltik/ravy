#[derive(Copy, Clone, Debug)]
pub enum Color {
    Palette(PaletteColor),
    Rgb(f64, f64, f64),
}

impl From<PaletteColor> for Color {
    fn from(color: PaletteColor) -> Self {
        Color::Palette(color)
    }
}

#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum PaletteColor {
    Index(u8),
    Off,
    White,
    Red,
    Orange,
    Yellow,
    Pea,
    Lime,
    Mint,
    Cyan,
    Blue,
    Violet,
    Magenta,
    Pink,
}

impl PaletteColor {
    #[rustfmt::skip]
    pub fn byte(&self) -> u8 {
        match self {
            PaletteColor::Index(b) => *b,
            PaletteColor::Red     => 72,
            PaletteColor::Orange  => 84,
            PaletteColor::Yellow  => 74,
            PaletteColor::Pea     => 17,
            PaletteColor::Lime    => 87,
            PaletteColor::Mint    => 77,
            PaletteColor::Cyan    => 78,
            PaletteColor::Blue    => 67,
            PaletteColor::Violet  => 81,
            PaletteColor::Magenta => 53,
            PaletteColor::Pink    => 95,
            PaletteColor::White   => 3,
            PaletteColor::Off     => 0,
        }
    }
}

use crate::color::{Rgb, Rgbw};
impl From<PaletteColor> for Rgbw {
    #[rustfmt::skip]
    fn from(p: PaletteColor) -> Self {
        match p {
            PaletteColor::Index(_) => Rgbw::WHITE,
            PaletteColor::Off      => Rgbw::BLACK,
            PaletteColor::White    => Rgbw::WHITE,
            PaletteColor::Red      => Rgbw::RED,
            PaletteColor::Orange   => Rgbw::ORANGE,
            PaletteColor::Yellow   => Rgbw::YELLOW,
            PaletteColor::Pea      => Rgbw::PEA,
            PaletteColor::Lime     => Rgbw::LIME,
            PaletteColor::Mint     => Rgbw::MINT,
            PaletteColor::Cyan     => Rgbw::CYAN,
            PaletteColor::Blue     => Rgbw::BLUE,
            PaletteColor::Violet   => Rgbw::VIOLET,
            PaletteColor::Magenta  => Rgbw::MAGENTA,
            PaletteColor::Pink     => Rgbw::PINK,
        }
    }
}
impl From<PaletteColor> for Rgb {
    fn from(p: PaletteColor) -> Self {
        Rgbw::from(p).into()
    }
}

impl From<Rgbw> for Color {
    fn from(color: Rgbw) -> Self {
        let Rgb(r, g, b) = color.into();
        Color::Rgb(r, g, b)
    }
}
impl From<Rgb> for Color {
    fn from(Rgb(r, g, b): Rgb) -> Self {
        Color::Rgb(r, g, b)
    }
}

// use std::collections::HashMap;
// use std::sync::LazyLock;
// static TABLE: LazyLock<HashMap<u8, (u8, u8, u8)>> = LazyLock::new(|| [
//     (0, (0x61, 0x61, 0x61)),
//     (1, (0xb3, 0xb3, 0xb3)),
//     (2, (0xdd, 0xdd, 0xdd)),
//     (3, (0xff, 0xff, 0xff)),
//     (4, (0xff, 0xb3, 0xb3)),
//     (5, (0xff, 0x61, 0x61)),
//     (6, (0xdd, 0x61, 0x61)),
//     (7, (0xb3, 0x61, 0x61)),
//     (8, (0xff, 0xf3, 0xd5)),
//     (9, (0xff, 0xb3, 0x61)),
//     (10, (0xdd, 0x8c, 0x61)),
//     (11, (0xb3, 0x76, 0x61)),
//     (12, (0xff, 0xee, 0xa1)),
//     (13, (0xff, 0xff, 0x61)),
//     (14, (0xdd, 0xdd, 0x61)),
//     (15, (0xb3, 0xb3, 0x61)),
//     (16, (0x99, 0xb2, 0x6e)),
//     (17, (0xc2, 0xff, 0x61)),
//     (18, (0xa1, 0xdd, 0x61)),
//     (19, (0x81, 0xb3, 0x61)),
//     (20, (0xc2, 0xff, 0xb3)),
//     (21, (0x61, 0xff, 0x61)),
//     (22, (0x61, 0xdd, 0x61)),
//     (23, (0x61, 0xb3, 0x61)),
//     (24, (0xc2, 0xff, 0xc2)),
//     (25, (0x61, 0xff, 0x8c)),
//     (26, (0x61, 0xdd, 0x76)),
//     (27, (0x61, 0xb3, 0x6b)),
//     (28, (0xc2, 0xff, 0xcc)),
//     (29, (0x61, 0xff, 0xcc)),
//     (30, (0x61, 0xdd, 0xa1)),
//     (31, (0x61, 0xb3, 0x81)),
//     (32, (0xc2, 0xff, 0xf3)),
//     (33, (0x61, 0xff, 0xe9)),
//     (34, (0x61, 0xdd, 0xc2)),
//     (35, (0x61, 0xb3, 0x96)),
//     (36, (0xc2, 0xf3, 0xff)),
//     (37, (0x61, 0xee, 0xff)),
//     (38, (0x61, 0xc7, 0xdd)),
//     (39, (0x61, 0xa1, 0xb3)),
//     (40, (0xc2, 0xdd, 0xff)),
//     (41, (0x61, 0xc7, 0xff)),
//     (42, (0x61, 0xa1, 0xdd)),
//     (43, (0x61, 0x71, 0xb3)),
//     (44, (0xa1, 0x8c, 0xff)),
//     (45, (0x61, 0x61, 0xff)),
//     (46, (0x61, 0x61, 0xdd)),
//     (47, (0x61, 0x61, 0xb3)),
//     (48, (0xcc, 0xb3, 0xff)),
//     (49, (0xa1, 0x61, 0xff)),
//     (50, (0x81, 0x61, 0xdd)),
//     (51, (0x76, 0x61, 0xb3)),
//     (52, (0xff, 0xb3, 0xff)),
//     (53, (0xff, 0x61, 0xff)),
//     (54, (0xdd, 0x61, 0xdd)),
//     (55, (0xb3, 0x61, 0xb3)),
//     (56, (0xff, 0xb3, 0xd5)),
//     (57, (0xff, 0x61, 0xc2)),
//     (58, (0xdd, 0x61, 0xa1)),
//     (59, (0xb3, 0x61, 0x8c)),
//     (60, (0xff, 0x76, 0x61)),
//     (61, (0xe9, 0xb3, 0x61)),
//     (62, (0xdd, 0xc2, 0x61)),
//     (63, (0xa1, 0xa1, 0x61)),
//     (64, (0x61, 0xb3, 0x61)),
//     (65, (0x61, 0xb3, 0x8c)),
//     (66, (0x61, 0x8c, 0xd5)),
//     (67, (0x61, 0x61, 0xff)),
//     (68, (0x61, 0xb3, 0xb3)),
//     (69, (0x8c, 0x61, 0xf3)),
//     (70, (0xcc, 0xb3, 0xc2)),
//     (71, (0x8c, 0x76, 0x81)),
//     (72, (0xff, 0x61, 0x61)),
//     (73, (0xf3, 0xff, 0xa1)),
//     (74, (0xee, 0xfc, 0x61)),
//     (75, (0xcc, 0xff, 0x61)),
//     (76, (0x76, 0xdd, 0x61)),
//     (77, (0x61, 0xff, 0xcc)),
//     (78, (0x61, 0xe9, 0xff)),
//     (79, (0x61, 0xa1, 0xff)),
//     (80, (0x8c, 0x61, 0xff)),
//     (81, (0xcc, 0x61, 0xfc)),
//     (82, (0xee, 0x8c, 0xdd)),
//     (83, (0xa1, 0x76, 0x61)),
//     (84, (0xff, 0xa1, 0x61)),
//     (85, (0xdd, 0xf9, 0x61)),
//     (86, (0xd5, 0xff, 0x8c)),
//     (87, (0x61, 0xff, 0x61)),
//     (88, (0xb3, 0xff, 0xa1)),
//     (89, (0xcc, 0xfc, 0xd5)),
//     (90, (0xb3, 0xff, 0xf6)),
//     (91, (0xcc, 0xe4, 0xff)),
//     (92, (0xa1, 0xc2, 0xf6)),
//     (93, (0xd5, 0xc2, 0xf9)),
//     (94, (0xf9, 0x8c, 0xff)),
//     (95, (0xff, 0x61, 0xcc)),
//     (96, (0xff, 0xc2, 0x61)),
//     (97, (0xf3, 0xee, 0x61)),
//     (98, (0xe4, 0xff, 0x61)),
//     (99, (0xdd, 0xcc, 0x61)),
//     (100, (0xb3, 0xa1, 0x61)),
//     (101, (0x61, 0xba, 0x76)),
//     (102, (0x76, 0xc2, 0x8c)),
//     (103, (0x81, 0x81, 0xa1)),
//     (104, (0x81, 0x8c, 0xcc)),
//     (105, (0xcc, 0xaa, 0x81)),
//     (106, (0xdd, 0x61, 0x61)),
//     (107, (0xf9, 0xb3, 0xa1)),
//     (108, (0xf9, 0xba, 0x76)),
//     (109, (0xff, 0xf3, 0x8c)),
//     (110, (0xe9, 0xf9, 0xa1)),
//     (111, (0xd5, 0xee, 0x76)),
//     (112, (0x81, 0x81, 0xa1)),
//     (113, (0xf9, 0xf9, 0xd5)),
//     (114, (0xdd, 0xfc, 0xe4)),
//     (115, (0xe9, 0xe9, 0xff)),
//     (116, (0xe4, 0xd5, 0xff)),
//     (117, (0xb3, 0xb3, 0xb3)),
//     (118, (0xd5, 0xd5, 0xd5)),
//     (119, (0xf9, 0xff, 0xff)),
//     (120, (0xe9, 0x61, 0x61)),
//     (121, (0xaa, 0x61, 0x61)),
//     (122, (0x81, 0xf6, 0x61)),
//     (123, (0x61, 0xb3, 0x61)),
//     (124, (0xf3, 0xee, 0x61)),
//     (125, (0xb3, 0xa1, 0x61)),
//     (126, (0xee, 0x2c, 0x61)),
//     (127, (0xc2, 0x76, 0x61)),
// ].into_iter().collect());
